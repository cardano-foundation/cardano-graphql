schema {
  query: Query
}

scalar Hash32HexString
scalar IPv4
scalar IPv6
scalar BigInt
scalar DateTime
scalar Percentage
scalar URL

type Query {
  blocks (
    limit: Int
    order_by: [Block_order_by!]
    offset: Int
    where: Block_bool_exp
  ): [Block]!
  blocks_aggregate (
    limit: Int
    order_by: [Block_order_by!]
    offset: Int
    where: Block_bool_exp
  ): Block_aggregate!
  cardano: Cardano!
  cardanoDbMeta: CardanoDbMeta!
  delegations (
    limit: Int
    order_by: [Delegation_order_by!]
    offset: Int
    where: Delegation_bool_exp
  ): [Delegation]
  delegations_aggregate (
    limit: Int
    order_by: [Delegation_order_by!]
    offset: Int
    where: Delegation_bool_exp
  ): Delegation_aggregate
  epochs (
    limit: Int
    order_by: [Epoch_order_by!]
    offset: Int
    where: Epoch_bool_exp
  ): [Epoch]!
  epochs_aggregate (
    limit: Int
    order_by: [Epoch_order_by!]
    offset: Int
    where: Epoch_bool_exp
  ): Epoch_aggregate!
  stakeDeregistrations (
    limit: Int
    order_by: [StakeDeregistration_order_by!]
    offset: Int
    where: StakeDeregistration_bool_exp
  ): [StakeDeregistration]
  stakeDeregistrations_aggregate (
    limit: Int
    order_by: [StakeDeregistration_order_by!]
    offset: Int
    where: StakeDeregistration_bool_exp
  ): StakeDeregistration_aggregate
  stakePools (
    limit: Int
    order_by: [StakePool_order_by!]
    offset: Int
    where: StakePool_bool_exp
  ): [StakePool]
  stakePools_aggregate (
    limit: Int
    order_by: [StakePool_order_by!]
    offset: Int
    where: StakePool_bool_exp
  ): StakePool_aggregate
  stakeRegistrations (
    limit: Int
    order_by: [StakeRegistration_order_by!]
    offset: Int
    where: StakeRegistration_bool_exp
  ): [StakeRegistration]
  stakeRegistrations_aggregate (
    limit: Int
    order_by: [StakeRegistration_order_by!]
    offset: Int
    where: StakeRegistration_bool_exp
  ): StakeRegistration_aggregate
  transactions (
    limit: Int
    order_by: [Transaction_order_by!]
    offset: Int
    where: Transaction_bool_exp
  ): [Transaction]!
  transactions_aggregate (
    limit: Int
    order_by: [Transaction_order_by!]
    offset: Int
    where: Transaction_bool_exp
  ): Transaction_aggregate!
  utxos (
    distinct_on: [TransactionOutput_distinct_on!]
    limit: Int
    order_by: [TransactionOutput_order_by!]
    offset: Int
    where: TransactionOutput_bool_exp
  ): [TransactionOutput]!
  utxos_aggregate (
    distinct_on: [TransactionOutput_distinct_on!]
    limit: Int
    order_by: [TransactionOutput_order_by!]
    offset: Int
    where: TransactionOutput_bool_exp
  ): TransactionOutput_aggregate!
  withdrawals (
    limit: Int
    order_by: [Withdrawal_order_by!]
    offset: Int
    where: Withdrawal_bool_exp
  ): [Withdrawal]
  withdrawals_aggregate (
    limit: Int
    order_by: [Withdrawal_order_by!]
    offset: Int
    where: Withdrawal_bool_exp
  ): Withdrawal_aggregate
}

type Cardano {
  tip: Block!
  currentEpoch: Epoch!
}

type CardanoDbMeta {
  initialized: Boolean!
  syncPercentage: Percentage!
}

type Delegation {
  address: String!
  stakePool: StakePool!
  transaction: Transaction
}

input Delegation_order_by {
  address: text_comparison_exp
  stakePool: StakePool_order_by
  transaction: Transaction_order_by
}

input Delegation_bool_exp {
  _and: [Delegation_bool_exp]
  _not: Delegation_bool_exp
  _or: [Delegation_bool_exp]
  address: text_comparison_exp
  stakePool: StakePool_bool_exp
  transaction: Transaction_bool_exp
}

type Delegation_aggregate {
  aggregate: Delegation_aggregate_fields
}

type Delegation_aggregate_fields {
  count: String
}

type Relay {
  ipv4: IPv4
  ipv6: IPv6
  dnsName: URL
  dnsSrvName: String
}

input Relay_bool_exp {
  ipv4: text_comparison_exp
  ipv6: text_comparison_exp
  dnsName: text_comparison_exp
  dnsSrvName: text_comparison_exp
}

type StakeDeregistration {
  address: String!
  transaction: Transaction!
}

type StakeDeregistration_aggregate {
  aggregate: StakeDeregistration_aggregate_fields
}

type StakeDeregistration_aggregate_fields {
  count: String
}

input StakeDeregistration_order_by {
  address: text_comparison_exp
  transaction: Transaction_order_by
}

input StakeDeregistration_bool_exp {
  _and: [StakeDeregistration_bool_exp]
  _not: StakeDeregistration_bool_exp
  _or: [StakeDeregistration_bool_exp]
  address: text_comparison_exp
  transaction: Transaction_bool_exp
}

type SlotLeader {
  description: String!
  hash: Hash32HexString!
  stakePool: StakePool
}

input SlotLeader_bool_exp {
  description: text_comparison_exp
  hash: Hash32HexString_comparison_exp
  stakePool: StakePool_bool_exp
}

type StakePool {
  fixedCost: String!
  hash: Hash32HexString!
  margin: Float!
  metadataHash: Hash32HexString
  owners: [StakePoolOwner!]!
  pledge: String!
  relays: [Relay]
  retirements: [StakePoolRetirement]
  rewardAddress: String!
  updatedIn: Transaction!
  url: URL
  withdrawals: [Withdrawal]
}


input StakePool_order_by {
  fixedCost: order_by
  hash: order_by
  margin: order_by
  pledge: order_by
  updatedIn: Transaction_order_by
  url: order_by
}

input StakePool_bool_exp {
  _and: [StakePool_bool_exp]
  _not: StakePool_bool_exp
  _or: [StakePool_bool_exp]
  hash: Hash32HexString_comparison_exp
  margin: Float_comparison_exp
  metadataHash: Hash32HexString_comparison_exp
  owners: StakePoolOwner_bool_exp
  pledge: text_comparison_exp
  registrationTransaction: Transaction_bool_exp
  relays: Relay_bool_exp
  retirements: StakePoolRetirement_bool_exp
  rewardAddress: text_comparison_exp
  url: text_comparison_exp
  withdrawals: Withdrawal_bool_exp
}

type StakePool_aggregate {
  aggregate: StakePool_aggregate_fields
}

type StakePool_aggregate_fields {
  avg: StakePool_avg_fields!
  count: String!
  max: StakePool_max_fields!
  min: StakePool_min_fields!
  sum: StakePool_sum_fields!
}

type StakePool_avg_fields {
  fixedCost: String
  margin: Float
  pledge: String
}

type StakePool_max_fields {
  fixedCost: String
  margin: Float
  pledge: String
}

type StakePool_min_fields {
  fixedCost: String
  margin: Float
  pledge: String
}

type StakePool_sum_fields {
  fixedCost: String
  margin: Float
  pledge: String
}

input StakePoolOwner_bool_exp {
  hash: Hash32HexString_comparison_exp
}

type StakePoolRetirement {
  announcedIn: Transaction
  inEffectFrom: Int!
  retiredInEpoch: Epoch
}

input StakePoolRetirement_bool_exp {
  announcedIn: Transaction_bool_exp
  inEffectFrom: Epoch_bool_exp
}

type StakePoolOwner {
  hash: Hash32HexString!
}


type StakeRegistration {
  address: String!
  transaction: Transaction!
}

input StakeRegistration_order_by {
  address: text_comparison_exp
  transaction: Transaction_order_by
}

input StakeRegistration_bool_exp {
  _and: [StakeRegistration_bool_exp]
  _not: StakeRegistration_bool_exp
  _or: [StakeRegistration_bool_exp]
  address: text_comparison_exp
  transaction: Transaction_bool_exp
}

type StakeRegistration_aggregate {
  aggregate: StakeRegistration_aggregate_fields
}

type StakeRegistration_aggregate_fields {
  count: String
}

type Transaction {
  block: Block
  blockIndex: Int!
  fee: BigInt!
  hash: Hash32HexString!
  inputs (
    limit: Int
    order_by: [TransactionInput_order_by]
    offset: Int
    where: TransactionInput_bool_exp
  ): [TransactionInput!]!
  inputs_aggregate (
    limit: Int
    order_by: [TransactionInput_order_by]
    offset: Int
    where: TransactionInput_bool_exp
  ): TransactionInput_aggregate!
  outputs (
    limit: Int
    order_by: [TransactionOutput_order_by]
    offset: Int
    where: TransactionOutput_bool_exp
  ): [TransactionOutput]!
  outputs_aggregate(
    limit: Int
    order_by: [TransactionOutput_order_by]
    offset: Int
    where: TransactionOutput_bool_exp
  ): TransactionOutput_aggregate!
  size: BigInt!
  totalOutput: String!
  includedAt: DateTime!
}

input Transaction_order_by {
  block: order_by
  blockIndex: order_by
  fee: order_by
  includedAt: order_by
  size: order_by
  totalOutput: order_by
}

input Transaction_bool_exp {
  _and: [Transaction_bool_exp]
  _not: Transaction_bool_exp
  _or: [Transaction_bool_exp]
  block: Block_bool_exp
  blockIndex: Int_comparison_exp
  fee: BigInt_comparison_exp
  hash: Hash32HexString_comparison_exp
  includedAt: Date_comparison_exp
  inputs: TransactionInput_bool_exp
  outputs: TransactionOutput_bool_exp
  size: BigInt_comparison_exp
  totalOutput: text_comparison_exp
}

type Transaction_aggregate {
  aggregate: Transaction_aggregate_fields
}

type Transaction_aggregate_fields {
  avg: Transaction_avg_fields!
  count: String!
  max: Transaction_max_fields!
  min: Transaction_min_fields!
  sum: Transaction_sum_fields!
}

type Transaction_avg_fields {
  fee: Float
  size: Float
  totalOutput: Float
}

type Transaction_max_fields {
  fee: String
  size: String
  totalOutput: String
}

type Transaction_min_fields {
  fee: String
  size: String
  totalOutput: String
}

type Transaction_sum_fields {
  fee: String
  size: String
  totalOutput: String
}

type TransactionInput {
  address: String!
  sourceTransaction: Transaction!
  sourceTxHash: Hash32HexString!
  sourceTxIndex: Int!
  transaction: Transaction!
  txHash: Hash32HexString!
  value: String!
}

input TransactionInput_order_by {
  address: order_by
  sourceTxHash: order_by
  txHash: order_by
  value: order_by
}

input TransactionInput_bool_exp {
  _and: [TransactionInput_bool_exp]
  _not: TransactionInput_bool_exp
  _or: [TransactionInput_bool_exp]
  address: text_comparison_exp
  sourceTransaction: Transaction_bool_exp
  transaction: Transaction_bool_exp
  value: text_comparison_exp
}

type TransactionInput_aggregate {
  aggregate: TransactionInput_aggregate_fields
}

type TransactionInput_aggregate_fields {
  avg: TransactionInput_avg_fields!
  count: String!
  max: TransactionInput_max_fields!
  min: TransactionInput_min_fields!
  sum: TransactionInput_sum_fields!
}

type TransactionInput_avg_fields {
  value: String
}

type TransactionInput_max_fields {
  value: String
}

type TransactionInput_min_fields {
  value: String
}

type TransactionInput_sum_fields {
  value: String
}

type TransactionOutput {
  address: String!
  index: Int!
  transaction: Transaction!
  txHash: Hash32HexString!
  value: String!
}

enum TransactionOutput_distinct_on {
  address
}

input TransactionOutput_order_by {
  address: order_by
  index: order_by
  txHash: order_by
  value: order_by
}

input TransactionOutput_bool_exp {
  _and: [TransactionOutput_bool_exp]
  _not: TransactionOutput_bool_exp
  _or: [TransactionOutput_bool_exp]
  address: text_comparison_exp
  transaction: Transaction_bool_exp
  value: text_comparison_exp
}

type TransactionOutput_aggregate {
  aggregate: TransactionOutput_aggregate_fields
}

type TransactionOutput_aggregate_fields {
  avg: TransactionOutput_avg_fields!
  count: String!
  max: TransactionOutput_max_fields!
  min: TransactionOutput_min_fields!
  sum: TransactionOutput_sum_fields!
}

type TransactionOutput_avg_fields {
  value: String
}

type TransactionOutput_max_fields {
  value: String
}

type TransactionOutput_min_fields {
  value: String
}

type TransactionOutput_sum_fields {
  value: String
}

type Block {
  # Genesis block does not belong to the 0th epoch, therefore it could be null
  epoch: Epoch
  epochNo: Int
  fees: BigInt!
  forgedAt: DateTime!
  slotLeader: SlotLeader!
  hash: Hash32HexString!
  # Ouroboros Classic Epoch Boundary blocks (EBB) do not have a block number
  merkelRoot: Hash32HexString
  number: Int
  opCert: Hash32HexString
  slotInEpoch: Int
  # Ouroboros Classic Epoch Boundary blocks (EBB) do not have a slot number
  slotNo: Int
  # Ouroboros Classic Epoch Boundary blocks (EBB) do not have a slot number
  previousBlock: Block
  protocolVersion: String
  nextBlock: Block
  size: BigInt!
  transactions(
    limit: Int
    order_by: [Transaction_order_by!]
    offset: Int
    where: Transaction_bool_exp
  ): [Transaction]!
  transactions_aggregate (
    limit: Int
    order_by: [Transaction_order_by!]
    offset: Int
    where: Transaction_bool_exp
  ): Transaction_aggregate!
  transactionsCount: String!
  vrfKey: Hash32HexString
}

input Block_bool_exp {
  _and: [Block_bool_exp]
  _not: Block_bool_exp
  _or: [Block_bool_exp]
  forgedAt: Date_comparison_exp
  slotLeader: SlotLeader_bool_exp
  epoch: Epoch_bool_exp
  fees: BigInt_comparison_exp
  hash: Hash32HexString_comparison_exp
  number: Int_comparison_exp
  previousBlock: Block_bool_exp
  nextBlock: Block_bool_exp
  size: BigInt_comparison_exp
  slotInEpoch: Int_comparison_exp
  slotNo: Int_comparison_exp
  transactions: Transaction_bool_exp
  transactionsCount: text_comparison_exp
}

input Block_order_by {
  forgedAt: order_by
  slotLeader: order_by
  epoch: Epoch_order_by
  fees: order_by
  number: order_by_with_nulls
  size: order_by
  slotNo: order_by_with_nulls
  transactionsCount: order_by
}

type Block_aggregate {
  aggregate: Block_aggregate_fields
}

type Block_aggregate_fields {
  avg: Block_avg_fields!
  count: String!
  max: Block_max_fields!
  min: Block_min_fields!
  sum: Block_sum_fields!
}

type Block_avg_fields {
  fees: Float
  size: Float
}

type Block_max_fields {
  fees: String
  size: String
}

type Block_min_fields {
  fees: String
  size: String
}

type Block_sum_fields {
  fees: String
  size: String
}

type Epoch {
  blocks (
    limit: Int
    order_by: [Block_order_by!]
    offset: Int
    where: Block_bool_exp
  ): [Block!]!
  blocks_aggregate (
    limit: Int
    order_by: [Block_order_by!]
    offset: Int
    where: Block_bool_exp
  ): Block_aggregate!
  blocksCount: String!
  output: String!
  number: Int!
  transactionsCount: String!
  startedAt: DateTime!
  lastBlockTime: DateTime!
}

input Epoch_bool_exp {
  _and: [Epoch_bool_exp]
  _not: Epoch_bool_exp
  _or: [Epoch_bool_exp]
  blocks: Block_bool_exp
  blocksCount: text_comparison_exp
  number: Int_comparison_exp
  output: text_comparison_exp
  transactionsCount: text_comparison_exp
}

input Epoch_order_by {
  blocksCount: order_by
  number: order_by
  output: order_by
  transactionsCount: order_by
}

type Epoch_aggregate {
  aggregate: Epoch_aggregate_fields!
}

type Epoch_aggregate_fields {
  count: String!
  max: Epoch_max_fields!
  min: Epoch_min_fields!
  sum: Epoch_sum_fields!
}

type Epoch_max_fields {
  blocksCount: String!
  number: Int!
  output: String!
  transactionsCount: String!
}

type Epoch_min_fields {
  blocksCount: String!
  output: String!
  transactionsCount: String!
}

type Epoch_sum_fields {
  blocksCount: String!
  output: String!
  transactionsCount: String!
}

type Withdrawal {
  address: String!
  amount: String!
  transaction: Transaction!
}

input Withdrawal_bool_exp {
  _and: [Withdrawal_bool_exp]
  _not: Withdrawal_bool_exp
  _or: [Withdrawal_bool_exp]
  address: text_comparison_exp
  amount: text_comparison_exp
  transaction: Transaction_bool_exp
}

input Withdrawal_order_by {
  address: order_by
  amount: order_by
  transaction: Transaction_order_by
}

type Withdrawal_aggregate {
  aggregate: Withdrawal_aggregate_fields!
}

type Withdrawal_aggregate_fields {
  count: String!
  max: Withdrawal_max_fields!
  min: Withdrawal_min_fields!
  sum: Withdrawal_sum_fields!
}

type Withdrawal_max_fields {
  amount: String!
}

type Withdrawal_min_fields {
  amount: String!
}

type Withdrawal_sum_fields {
  amount: String!
}

# expression to compare data of type date. All fields are combined with logical 'AND'.
input Date_comparison_exp {
  _eq: DateTime
  _gt: DateTime
  _gte: DateTime
  _in: [DateTime]
  _lt: DateTime
  _lte: DateTime
  _neq: DateTime
  _nin: [DateTime]
}

# expression to compare data of type Float. All fields are combined with logical 'AND'.
input Float_comparison_exp {
  _eq: Float
  _gt: Float
  _gte: Float
  _in: [Float!]
  _is_null: Boolean
  _lt: Float
  _lte: Float
  _neq: Float
  _nin: [Float!]
}

# expression to compare data of type Int. All fields are combined with logical 'AND'.
input Int_comparison_exp {
  _eq: Int
  _gt: Int
  _gte: Int
  _in: [Int!]
  _is_null: Boolean
  _lt: Int
  _lte: Int
  _neq: Int
  _nin: [Int!]
}

# expression to compare data of type BigInt. All fields are combined with logical 'AND'.
input BigInt_comparison_exp {
  _eq: BigInt
  _gt: BigInt
  _gte: BigInt
  _in: [BigInt!]
  _is_null: Boolean
  _lt: BigInt
  _lte: BigInt
  _neq: BigInt
  _nin: [BigInt!]
}

# expression to compare data of type Percentage. All fields are combined with logical 'AND'.
input Percentage_comparison_exp {
  _eq: Percentage
  _gt: Percentage
  _gte: Percentage
  _lt: Percentage
  _lte: Percentage
  _neq: Percentage
}

# All fields are combined with logical 'AND'.
input Hash32HexString_comparison_exp {
  _eq: Hash32HexString
  _in: [Hash32HexString]
  _neq: Hash32HexString
  _nin: [Hash32HexString]
}

input text_comparison_exp {
  _eq: String
  _gt: String
  _gte: String
  _ilike: String
  _in: [String]
  _is_null: Boolean
  _like: String
  _lt: String
  _lte: String
  _neq: String
  _nilike: String
  _nin: [String]
  _nlike: String
  _nsimilar: String
  _similar: String
}

# ordering options
enum order_by {
  # in the ascending order, nulls last
  asc
  # in the ascending order, nulls first
  desc
}

# ordering options
enum order_by_with_nulls {
  # in the ascending order, nulls last
  asc
  # in the ascending order, nulls first
  asc_nulls_first
  # in the ascending order, nulls last
  asc_nulls_last
  # in the descending order, nulls first
  desc
  # in the descending order, nulls first
  desc_nulls_first
  # in the descending order, nulls last
  desc_nulls_last
}
