version: "3.8"

services:
  postgres:
    image: postgres:${POSTGRES_VERSION:-14.10-alpine}
    environment:
      - POSTGRES_LOGGING=true
      - POSTGRES_DB_FILE=/run/secrets/postgres_db
      - POSTGRES_PASSWORD_FILE=/run/secrets/postgres_password
      - POSTGRES_USER_FILE=/run/secrets/postgres_user
    ports:
      - ${POSTGRES_PORT:-5432}:${POSTGRES_PORT:-5432}
    command: -p ${POSTGRES_PORT:-5432}
    secrets:
      - postgres_db
      - postgres_password
      - postgres_user
    shm_size: '2gb'
    volumes:
      - postgres14-data:/var/lib/postgresql/data
    restart: on-failure
    logging:
      driver: "json-file"
      options:
        max-size: "200k"
        max-file: "10"

  cardano-node:
    image: ghcr.io/intersectmbo/cardano-node:${CARDANO_NODE_VERSION:-9.1.1}
    environment:
      - NETWORK=${NETWORK:-mainnet}
    volumes:
      - node-ipc:/ipc
      - node-db:/node/db
      - ./config/network/${NETWORK:-mainnet}:/config
    entrypoint: cardano-node run --database-path /node/db --socket-path /ipc/node.socket --topology /config/cardano-node/topology.json --config /config/cardano-node/config.json

  ogmios:
    image: cardanosolutions/ogmios:${OGMIOS_VERSION:-v6.6.1}
    command:
      - --host
      - 0.0.0.0
      - --node-socket
      - /ipc/node.socket
      - --node-config
      - /config/cardano-node/config.json
      - --log-level-websocket
      - error
    volumes:
      - node-ipc:/ipc
      - ./config/network/${NETWORK:-mainnet}:/config
    ports:
      - ${OGMIOS_PORT:-1337}:1337
    restart: on-failure

  cardano-db-sync:
    platform: linux/x86_64
    image: ghcr.io/intersectmbo/cardano-db-sync:${CARDANO_DB_SYNC_VERSION:-13.5.0.2}
    command: [ "--config", "/config/cardano-db-sync/config.json", "--socket-path", "/node-ipc/node.socket" ]
    environment:
      - POSTGRES_HOST=postgres
      - POSTGRES_PORT=${POSTGRES_PORT:-5432}
      - RESTORE_SNAPSHOT=${RESTORE_SNAPSHOT:-}
      - RESTORE_RECREATE_DB=N
    depends_on:
      # Depend on both services to be started before starting.
      cardano-node:
        condition: service_started
      postgres:
        condition: service_started
    secrets:
      - postgres_password
      - postgres_user
      - postgres_db
    volumes:
      - ./config/network/${NETWORK:-mainnet}:/config
      - db-sync-data:/var/lib/cexplorer
      - node-ipc:/node-ipc
    restart: on-failure
    stop_signal: SIGINT
    logging:
      driver: "json-file"
      options:
        max-size: "200k"
        max-file: "10"

  hasura:
    build:
      context: ./packages/api-cardano-db-hasura/hasura
    image: cardanofoundation/cardano-graphql-hasura:${CARDANO_GRAPHQL_VERSION:-8.2.2}
    ports:
      - ${HASURA_PORT:-8090}:8080
    depends_on:
      - "postgres"
    restart: on-failure
    environment:
      - HASURA_GRAPHQL_ENABLE_CONSOLE=true
      - HASURA_GRAPHQL_CORS_DOMAIN=http://localhost:9695
      - POSTGRES_PORT=${POSTGRES_PORT:-5432}
    secrets:
      - postgres_db
      - postgres_password
      - postgres_user
    logging:
      driver: "json-file"
      options:
        max-size: "200k"
        max-file: "10"

  background:
    build:
      context: .
      target: background
    image: cardanofoundation/cardano-graphql-background:${CARDANO_GRAPHQL_VERSION:-8.2.2}-${NETWORK:-mainnet}
    depends_on:
      - "hasura"
      - "postgres"
    environment:
      - LOGGER_MIN_SEVERITY=${LOGGER_MIN_SEVERITY:-info}
      - METADATA_SERVER_URI=${METADATA_SERVER_URI:-http://token-metadata-registry:${TOKEN_REGISTRY_PORT:-8080}}
      - POSTGRES_PORT=${POSTGRES_PORT:-5432}
      - CHAIN_FOLLOWER_START_SLOT=${CHAIN_FOLLOWER_START_SLOT:-0}
      - CHAIN_FOLLOWER_START_ID=${CHAIN_FOLLOWER_START_ID:-}
    restart: on-failure
    secrets:
      - postgres_db
      - postgres_password
      - postgres_user
    logging:
      driver: "json-file"
      options:
        max-size: "200k"
        max-file: "10"

  server:
    platform: linux/x86_64
    build:
      args:
        - NETWORK=${NETWORK:-mainnet}
      context: .
      target: server
    image: cardanofoundation/cardano-graphql-server:${CARDANO_GRAPHQL_VERSION:-8.2.2}-${NETWORK:-mainnet}
    environment:
      - ALLOW_INTROSPECTION=true
      - CACHE_ENABLED=true
      - LOGGER_MIN_SEVERITY=${LOGGER_MIN_SEVERITY:-info}
      - POSTGRES_PORT=${POSTGRES_PORT:-5432}
    expose:
      - ${API_PORT:-3100}
    ports:
      - ${API_PORT:-3100}:3100
    restart: on-failure
    logging:
      driver: "json-file"
      options:
        max-size: "200k"
        max-file: "10"

  token-metadata-registry:
    build:
      context: .
      target: token-registry
    ports:
      - ${TOKEN_REGISTRY_PORT:-8080}:8080
    environment:
      - TOKEN_METADATA_SYNC_JOB=true
      - POSTGRES_PORT=${POSTGRES_PORT:-5432}
      - POSTGRES_HOST=postgres
      - DB_SCHEMA=tokenregistry
      - NETWORK=${NETWORK:-mainnet}
    secrets:
      - postgres_db
      - postgres_password
      - postgres_user
    restart: on-failure
    depends_on:
      - postgres

secrets:
  postgres_db:
    file: ./placeholder-secrets/postgres_db
  postgres_password:
    file: ./placeholder-secrets/postgres_password
  postgres_user:
    file: ./placeholder-secrets/postgres_user
volumes:
  db-sync-data:
  node-db:
  node-ipc:
  postgres14-data:
